{
    "Comment": "A state machine that will react to completion events and clean up orphaned semaphores",
    "StartAt": "Extract Key",
    "States": {
        "Extract Key": {
            "Type": "Pass",
            "Parameters": {
                "input.$": "States.StringToJson($.detail.input)",
                "semaphoreOwnerid.$": "$.detail.executionArn"
            },
            "ResultPath": "$",
            "Next": "Get Current Semaphore Item"
        },
        "Get Current Semaphore Item": {
            "Comment": "Get info from DDB for the semaphore item to look and see if this specific owner is still holding a semaphore",
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
                "TableName": "${ConcurrencyTable}",
                "ExpressionAttributeNames": {
                    "#semaphoreOwnerid.$": "$.semaphoreOwnerid"
                },
                "Key": {
                    "PK": {
                        "S.$": "$.input.concurrencyKey"
                    }
                },
                "ProjectionExpression": "#semaphoreOwnerid"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.4
                }
            ],
            "ResultSelector": {
                "Item.$": "$.Item",
                "ItemString.$": "States.JsonToString($.Item)"
            },
            "ResultPath": "$.semaphoreinfo.currentsemaphoreitem",
            "Next": "Check If Semaphore Is Held"
        },
        "Check If Semaphore Is Held": {
            "Comment": "This state checks to see if the execution in question holds a semaphore. It can tell that by looking for Z, which will be indicative of the timestamp value. That will only be there in the stringified version of the data returned from DDB if this execution holds a semaphore",
            "Type": "Choice",
            "Choices": [
                {
                    "And": [
                        {
                            "Variable": "$.semaphoreinfo.currentsemaphoreitem.ItemString",
                            "IsPresent": true
                        },
                        {
                            "Variable": "$.semaphoreinfo.currentsemaphoreitem.ItemString",
                            "StringMatches": "*Z*"
                        }
                    ],
                    "Next": "Clean Up Semaphore"
                }
            ],
            "Default": "Success State"
        },
        "Clean Up Semaphore": {
            "Comment": "If this semaphoreownerid is still there, then clean it up and release the semaphore",
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
                "TableName": "${ConcurrencyTable}",
                "Key": {
                    "PK": {
                        "S.$": "$.input.concurrencyKey"
                    }
                },
                "ExpressionAttributeNames": {
                    "#count": "count",
                    "#semaphoreOwnerid.$": "$.semaphoreOwnerid"
                },
                "ExpressionAttributeValues": {
                    ":decrease": {
                        "N": "1"
                    }
                },
                "UpdateExpression": "SET #count = #count - :decrease REMOVE #semaphoreOwnerid",
                "ConditionExpression": "attribute_exists(#semaphoreOwnerid)",
                "ReturnValues": "UPDATED_NEW"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "DynamoDB.ConditionalCheckFailedException"
                    ],
                    "MaxAttempts": 0
                },
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 20,
                    "BackoffRate": 1.4
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "DynamoDB.ConditionalCheckFailedException"
                    ],
                    "Next": "Success State",
                    "ResultPath": null
                }
            ],
            "ResultPath": null,
            "Next": "Success State"
        },
        "Success State": {
            "Type": "Succeed"
        }
    }
}